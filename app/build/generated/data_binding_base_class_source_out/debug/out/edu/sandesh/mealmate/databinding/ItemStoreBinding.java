// Generated by view binder compiler. Do not edit!
package edu.sandesh.mealmate.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.GridLayout;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import edu.sandesh.mealmate.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemStoreBinding implements ViewBinding {
  @NonNull
  private final CardView rootView;

  @NonNull
  public final ImageButton deleteStoreButton;

  @NonNull
  public final LinearLayout detailsSection;

  @NonNull
  public final ImageView expandIcon;

  @NonNull
  public final MaterialButton getDirectionsButton;

  @NonNull
  public final TextView groceryMatchesTitle;

  @NonNull
  public final CardView ingredientsCard;

  @NonNull
  public final GridLayout ingredientsGrid;

  @NonNull
  public final TextView ingredientsTitle;

  @NonNull
  public final TextView matchingCount;

  @NonNull
  public final TextView storeAddress;

  @NonNull
  public final TextView storeDistance;

  @NonNull
  public final ImageView storeImage;

  @NonNull
  public final TextView storeName;

  private ItemStoreBinding(@NonNull CardView rootView, @NonNull ImageButton deleteStoreButton,
      @NonNull LinearLayout detailsSection, @NonNull ImageView expandIcon,
      @NonNull MaterialButton getDirectionsButton, @NonNull TextView groceryMatchesTitle,
      @NonNull CardView ingredientsCard, @NonNull GridLayout ingredientsGrid,
      @NonNull TextView ingredientsTitle, @NonNull TextView matchingCount,
      @NonNull TextView storeAddress, @NonNull TextView storeDistance,
      @NonNull ImageView storeImage, @NonNull TextView storeName) {
    this.rootView = rootView;
    this.deleteStoreButton = deleteStoreButton;
    this.detailsSection = detailsSection;
    this.expandIcon = expandIcon;
    this.getDirectionsButton = getDirectionsButton;
    this.groceryMatchesTitle = groceryMatchesTitle;
    this.ingredientsCard = ingredientsCard;
    this.ingredientsGrid = ingredientsGrid;
    this.ingredientsTitle = ingredientsTitle;
    this.matchingCount = matchingCount;
    this.storeAddress = storeAddress;
    this.storeDistance = storeDistance;
    this.storeImage = storeImage;
    this.storeName = storeName;
  }

  @Override
  @NonNull
  public CardView getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemStoreBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemStoreBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_store, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemStoreBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.deleteStoreButton;
      ImageButton deleteStoreButton = ViewBindings.findChildViewById(rootView, id);
      if (deleteStoreButton == null) {
        break missingId;
      }

      id = R.id.detailsSection;
      LinearLayout detailsSection = ViewBindings.findChildViewById(rootView, id);
      if (detailsSection == null) {
        break missingId;
      }

      id = R.id.expandIcon;
      ImageView expandIcon = ViewBindings.findChildViewById(rootView, id);
      if (expandIcon == null) {
        break missingId;
      }

      id = R.id.getDirectionsButton;
      MaterialButton getDirectionsButton = ViewBindings.findChildViewById(rootView, id);
      if (getDirectionsButton == null) {
        break missingId;
      }

      id = R.id.groceryMatchesTitle;
      TextView groceryMatchesTitle = ViewBindings.findChildViewById(rootView, id);
      if (groceryMatchesTitle == null) {
        break missingId;
      }

      id = R.id.ingredientsCard;
      CardView ingredientsCard = ViewBindings.findChildViewById(rootView, id);
      if (ingredientsCard == null) {
        break missingId;
      }

      id = R.id.ingredientsGrid;
      GridLayout ingredientsGrid = ViewBindings.findChildViewById(rootView, id);
      if (ingredientsGrid == null) {
        break missingId;
      }

      id = R.id.ingredientsTitle;
      TextView ingredientsTitle = ViewBindings.findChildViewById(rootView, id);
      if (ingredientsTitle == null) {
        break missingId;
      }

      id = R.id.matchingCount;
      TextView matchingCount = ViewBindings.findChildViewById(rootView, id);
      if (matchingCount == null) {
        break missingId;
      }

      id = R.id.storeAddress;
      TextView storeAddress = ViewBindings.findChildViewById(rootView, id);
      if (storeAddress == null) {
        break missingId;
      }

      id = R.id.storeDistance;
      TextView storeDistance = ViewBindings.findChildViewById(rootView, id);
      if (storeDistance == null) {
        break missingId;
      }

      id = R.id.storeImage;
      ImageView storeImage = ViewBindings.findChildViewById(rootView, id);
      if (storeImage == null) {
        break missingId;
      }

      id = R.id.storeName;
      TextView storeName = ViewBindings.findChildViewById(rootView, id);
      if (storeName == null) {
        break missingId;
      }

      return new ItemStoreBinding((CardView) rootView, deleteStoreButton, detailsSection,
          expandIcon, getDirectionsButton, groceryMatchesTitle, ingredientsCard, ingredientsGrid,
          ingredientsTitle, matchingCount, storeAddress, storeDistance, storeImage, storeName);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
